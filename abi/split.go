// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SplitMetaData contains all meta data concerning the Split contract.
var SplitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_trustedForwarders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payeeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060008060019054906101000a900460ff16159050808015620000445750600160008054906101000a900460ff1660ff16105b8062000080575062000061306200016360201b620011ce1760201c565b1580156200007f5750600160008054906101000a900460ff1660ff16145b5b620000c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b9906200020d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801562000100576001600060016101000a81548160ff0219169083151502179055505b80156200015c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405162000153919062000289565b60405180910390a15b50620002a6565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620001f5602e8362000186565b9150620002028262000197565b604082019050919050565b600060208201905081810360008301526200022881620001e6565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000620002716200026b62000265846200022f565b62000246565b62000239565b9050919050565b620002838162000250565b82525050565b6000602082019050620002a0600083018462000278565b92915050565b61455280620002b66000396000f3fe6080604052600436106101d05760003560e01c80639852595c116100f7578063ca15c87311610095578063d79779b211610064578063d79779b214610754578063e33b7de314610791578063e4fc6b6d146107bc578063e8a3d485146107d357610217565b8063ca15c87314610686578063cb2ef6f7146106c3578063ce7c2ac2146106ee578063d547741f1461072b57610217565b8063a3f8eace116100d1578063a3f8eace146105a6578063ac9650d8146105e3578063b1a1443714610620578063c45ac0501461064957610217565b80639852595c14610513578063a0a8e46014610550578063a217fddf1461057b57610217565b8063406072a91161016f5780638b83209b1161013e5780638b83209b146104335780639010d07c1461047057806391d14854146104ad578063938e3d7b146104ea57610217565b8063406072a91461036757806348b75044146103a4578063572b6c05146103cd57806363453ae11461040a57610217565b8063248a9ca3116101ab578063248a9ca3146102ad5780632f2ff15d146102ea57806336568abe146103135780633a98ef391461033c57610217565b8062dbe1091461021c57806301ffc9a714610247578063191655871461028457610217565b36610217577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7706101fe6107fe565b3460405161020d929190612ab1565b60405180910390a1005b600080fd5b34801561022857600080fd5b5061023161080d565b60405161023e9190612ada565b60405180910390f35b34801561025357600080fd5b5061026e60048036038101906102699190612b61565b61081b565b60405161027b9190612ba9565b60405180910390f35b34801561029057600080fd5b506102ab60048036038101906102a69190612c02565b610895565b005b3480156102b957600080fd5b506102d460048036038101906102cf9190612c65565b6108ea565b6040516102e19190612ca1565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190612ce8565b61090a565b005b34801561031f57600080fd5b5061033a60048036038101906103359190612ce8565b61092b565b005b34801561034857600080fd5b506103516109ae565b60405161035e9190612ada565b60405180910390f35b34801561037357600080fd5b5061038e60048036038101906103899190612d66565b6109b9565b60405161039b9190612ada565b60405180910390f35b3480156103b057600080fd5b506103cb60048036038101906103c69190612d66565b610a41565b005b3480156103d957600080fd5b506103f460048036038101906103ef9190612da6565b610a98565b6040516104019190612ba9565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190612dd3565b610aee565b005b34801561043f57600080fd5b5061045a60048036038101906104559190612e2c565b610b30565b6040516104679190612e59565b60405180910390f35b34801561047c57600080fd5b5061049760048036038101906104929190612e74565b610b79565b6040516104a49190612e59565b60405180910390f35b3480156104b957600080fd5b506104d460048036038101906104cf9190612ce8565b610ba8565b6040516104e19190612ba9565b60405180910390f35b3480156104f657600080fd5b50610511600480360381019061050c9190612f19565b610c13565b005b34801561051f57600080fd5b5061053a60048036038101906105359190612da6565b610c38565b6040516105479190612ada565b60405180910390f35b34801561055c57600080fd5b50610565610c82565b6040516105729190612f82565b60405180910390f35b34801561058757600080fd5b50610590610c8b565b60405161059d9190612ca1565b60405180910390f35b3480156105b257600080fd5b506105cd60048036038101906105c89190612da6565b610c92565b6040516105da9190612ada565b60405180910390f35b3480156105ef57600080fd5b5061060a60048036038101906106059190612ff3565b610cc5565b604051610617919061319b565b60405180910390f35b34801561062c57600080fd5b5061064760048036038101906106429190613473565b610dd1565b005b34801561065557600080fd5b50610670600480360381019061066b9190612d66565b610f44565b60405161067d9190612ada565b60405180910390f35b34801561069257600080fd5b506106ad60048036038101906106a89190612c65565b610ff3565b6040516106ba9190612ada565b60405180910390f35b3480156106cf57600080fd5b506106d8611017565b6040516106e59190612ca1565b60405180910390f35b3480156106fa57600080fd5b5061071560048036038101906107109190612da6565b61103f565b6040516107229190612ada565b60405180910390f35b34801561073757600080fd5b50610752600480360381019061074d9190612ce8565b611089565b005b34801561076057600080fd5b5061077b60048036038101906107769190612dd3565b6110aa565b6040516107889190612ada565b60405180910390f35b34801561079d57600080fd5b506107a66110f4565b6040516107b39190612ada565b60405180910390f35b3480156107c857600080fd5b506107d16110ff565b005b3480156107df57600080fd5b506107e861113f565b6040516107f591906135b3565b60405180910390f35b60006108086111f1565b905090565b600061013180549050905090565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061088e575061088d82611223565b5b9050919050565b60006108a08261129d565b905060008114156108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd90613647565b60405180910390fd5b5050565b600060c96000838152602001908152602001600020600101549050919050565b610913826108ea565b61091c816113ea565b61092683836113fe565b505050565b6109336107fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610997906136d9565b60405180910390fd5b6109aa8282611432565b5050565b600061012d54905090565b600061013360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610a4d8383611466565b90506000811415610a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8a90613647565b60405180910390fd5b505050565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610af861080d565b905060005b81811015610b2b57610b1783610b1283610b30565b611466565b508080610b2390613728565b915050610afd565b505050565b60006101318281548110610b4757610b46613771565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ba08260fb60008681526020019081526020016000206116c190919063ffffffff16565b905092915050565b600060c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b610c20816113ea565b828261015f9190610c3292919061292e565b50505050565b600061013060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001905090565b6000801b81565b600080610c9d6110f4565b47610ca891906137a0565b9050610cbd8382610cb886610c38565b6116db565b915050919050565b60608282905067ffffffffffffffff811115610ce457610ce36131c2565b5b604051908082528060200260200182016040528015610d1757816020015b6060815260200190600190039081610d025790505b50905060005b83839050811015610dca57610d9930858584818110610d3f57610d3e613771565b5b9050602002810190610d519190613805565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061174b565b828281518110610dac57610dab613771565b5b60200260200101819052508080610dc290613728565b915050610d1d565b5092915050565b60008060019054906101000a900460ff16159050808015610e025750600160008054906101000a900460ff1660ff16105b80610e2f5750610e11306111ce565b158015610e2e5750600160008054906101000a900460ff1660ff16145b5b610e6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e65906138da565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610eab576001600060016101000a81548160ff0219169083151502179055505b610eb48461182f565b610ebe8383611892565b8461015f9080519060200190610ed59291906129b4565b50610ee36000801b876118f7565b8015610f3c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610f33919061393f565b60405180910390a15b505050505050565b600080610f50846110aa565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f899190612e59565b602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca919061396f565b610fd491906137a0565b9050610fea8382610fe587876109b9565b6116db565b91505092915050565b600061101060fb6000848152602001908152602001600020611905565b9050919050565b60007f53706c6974000000000000000000000000000000000000000000000000000000905090565b600061012f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611092826108ea565b61109b816113ea565b6110a58383611432565b505050565b600061013260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061012e54905090565b600061110961080d565b905060005b8181101561113b5761112761112282610b30565b61129d565b50808061113390613728565b91505061110e565b5050565b61015f805461114d906139cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611179906139cb565b80156111c65780601f1061119b576101008083540402835291602001916111c6565b820191906000526020600020905b8154815290600101906020018083116111a957829003601f168201915b505050505081565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006111fc33610a98565b1561121057601436033560601c905061121f565b61121861191a565b9050611220565b5b90565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611296575061129582611922565b5b9050919050565b6000806112a98361103f565b116112e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e090613a6f565b60405180910390fd5b60006112f36110f4565b476112fe91906137a0565b90506000611315848361131087610c38565b6116db565b9050600081141561132b576000925050506113e5565b8061013060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461137b91906137a0565b925050819055508061012e600082825461139591906137a0565b925050819055506113a6848261198c565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05684826040516113d7929190613ae4565b60405180910390a180925050505b919050565b6113fb816113f66107fe565b611a80565b50565b6114088282611b05565b61142d8160fb6000858152602001908152602001600020611be690919063ffffffff16565b505050565b61143c8282611c16565b6114618160fb6000858152602001908152602001600020611cf890919063ffffffff16565b505050565b6000806114728361103f565b116114b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a990613a6f565b60405180910390fd5b60006114bd846110aa565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114f69190612e59565b602060405180830381865afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611537919061396f565b61154191906137a0565b90506000611559848361155488886109b9565b6116db565b9050600081141561156f576000925050506116bb565b8061013360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115fc91906137a0565b925050819055508061013260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165391906137a0565b92505081905550611665858583611d28565b8473ffffffffffffffffffffffffffffffffffffffff167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a85836040516116ad929190612ab1565b60405180910390a280925050505b92915050565b60006116d08360000183611dae565b60001c905092915050565b60008161012d5461012f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548561172e9190613b0d565b6117389190613b96565b6117429190613bc7565b90509392505050565b6060611756836111ce565b611795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178c90613c6d565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516117bd9190613cc9565b600060405180830381855af49150503d80600081146117f8576040519150601f19603f3d011682016040523d82523d6000602084013e6117fd565b606091505b509150915061182582826040518060600160405280602781526020016144f660279139611dd9565b9250505092915050565b600060019054906101000a900460ff1661187e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187590613d52565b60405180910390fd5b611886611dfb565b61188f81611e4c565b50565b600060019054906101000a900460ff166118e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d890613d52565b60405180910390fd5b6118e9611dfb565b6118f38282611f30565b5050565b61190182826113fe565b5050565b600061191382600001612069565b9050919050565b600033905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b804710156119cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c690613dbe565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516119f590613e04565b60006040518083038185875af1925050503d8060008114611a32576040519150601f19603f3d011682016040523d82523d6000602084013e611a37565b606091505b5050905080611a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7290613e8b565b60405180910390fd5b505050565b611a8a8282610ba8565b611b0157611a978161207a565b611aa58360001c60206120a7565b604051602001611ab6929190613f7f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af891906135b3565b60405180910390fd5b5050565b611b0f8282610ba8565b611be257600160c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b876107fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611c0e836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6122e3565b905092915050565b611c208282610ba8565b15611cf457600060c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c996107fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000611d20836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612353565b905092915050565b611da98363a9059cbb60e01b8484604051602401611d47929190612ab1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612467565b505050565b6000826000018281548110611dc657611dc5613771565b5b9060005260206000200154905092915050565b60608315611de957829050611df4565b611df3838361252e565b5b9392505050565b600060019054906101000a900460ff16611e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4190613d52565b60405180910390fd5b565b600060019054906101000a900460ff16611e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9290613d52565b60405180910390fd5b60005b8151811015611f2c57600160656000848481518110611ec057611ebf613771565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611f2490613728565b915050611e9e565b5050565b600060019054906101000a900460ff16611f7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7690613d52565b60405180910390fd5b8051825114611fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fba9061402b565b60405180910390fd5b6000825111612007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffe90614097565b60405180910390fd5b60005b82518110156120645761205183828151811061202957612028613771565b5b602002602001015183838151811061204457612043613771565b5b602002602001015161257e565b808061205c90613728565b91505061200a565b505050565b600081600001805490509050919050565b60606120a08273ffffffffffffffffffffffffffffffffffffffff16601460ff166120a7565b9050919050565b6060600060028360026120ba9190613b0d565b6120c491906137a0565b67ffffffffffffffff8111156120dd576120dc6131c2565b5b6040519080825280601f01601f19166020018201604052801561210f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061214757612146613771565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106121ab576121aa613771565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026121eb9190613b0d565b6121f591906137a0565b90505b6001811115612295577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061223757612236613771565b5b1a60f81b82828151811061224e5761224d613771565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061228e906140b7565b90506121f8565b50600084146122d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d09061412d565b60405180910390fd5b8091505092915050565b60006122ef83836127b0565b61234857826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061234d565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461245b5760006001826123859190613bc7565b905060006001866000018054905061239d9190613bc7565b905081811461240c5760008660000182815481106123be576123bd613771565b5b90600052602060002001549050808760000184815481106123e2576123e1613771565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806124205761241f61414d565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612461565b60009150505b92915050565b60006124c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127d39092919063ffffffff16565b905060008151111561252957808060200190518101906124e991906141a8565b612528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251f90614247565b60405180910390fd5b5b505050565b6000825111156125415781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257591906135b3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156125ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e5906142d9565b60405180910390fd5b60008111612631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262890614345565b60405180910390fd5b600061012f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146126b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ab906143d7565b60405180910390fd5b610131829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508061012f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508061012d5461276c91906137a0565b61012d819055507f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac82826040516127a4929190612ab1565b60405180910390a15050565b600080836001016000848152602001908152602001600020541415905092915050565b60606127e284846000856127eb565b90509392505050565b606082471015612830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282790614469565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516128599190613cc9565b60006040518083038185875af1925050503d8060008114612896576040519150601f19603f3d011682016040523d82523d6000602084013e61289b565b606091505b50915091506128ac878383876128b8565b92505050949350505050565b6060831561291b57600083511415612913576128d3856111ce565b612912576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612909906144d5565b60405180910390fd5b5b829050612926565b612925838361252e565b5b949350505050565b82805461293a906139cb565b90600052602060002090601f01602090048101928261295c57600085556129a3565b82601f1061297557803560ff19168380011785556129a3565b828001600101855582156129a3579182015b828111156129a2578235825591602001919060010190612987565b5b5090506129b09190612a3a565b5090565b8280546129c0906139cb565b90600052602060002090601f0160209004810192826129e25760008555612a29565b82601f106129fb57805160ff1916838001178555612a29565b82800160010185558215612a29579182015b82811115612a28578251825591602001919060010190612a0d565b5b509050612a369190612a3a565b5090565b5b80821115612a53576000816000905550600101612a3b565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a8282612a57565b9050919050565b612a9281612a77565b82525050565b6000819050919050565b612aab81612a98565b82525050565b6000604082019050612ac66000830185612a89565b612ad36020830184612aa2565b9392505050565b6000602082019050612aef6000830184612aa2565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612b3e81612b09565b8114612b4957600080fd5b50565b600081359050612b5b81612b35565b92915050565b600060208284031215612b7757612b76612aff565b5b6000612b8584828501612b4c565b91505092915050565b60008115159050919050565b612ba381612b8e565b82525050565b6000602082019050612bbe6000830184612b9a565b92915050565b6000612bcf82612a57565b9050919050565b612bdf81612bc4565b8114612bea57600080fd5b50565b600081359050612bfc81612bd6565b92915050565b600060208284031215612c1857612c17612aff565b5b6000612c2684828501612bed565b91505092915050565b6000819050919050565b612c4281612c2f565b8114612c4d57600080fd5b50565b600081359050612c5f81612c39565b92915050565b600060208284031215612c7b57612c7a612aff565b5b6000612c8984828501612c50565b91505092915050565b612c9b81612c2f565b82525050565b6000602082019050612cb66000830184612c92565b92915050565b612cc581612a77565b8114612cd057600080fd5b50565b600081359050612ce281612cbc565b92915050565b60008060408385031215612cff57612cfe612aff565b5b6000612d0d85828601612c50565b9250506020612d1e85828601612cd3565b9150509250929050565b6000612d3382612a77565b9050919050565b612d4381612d28565b8114612d4e57600080fd5b50565b600081359050612d6081612d3a565b92915050565b60008060408385031215612d7d57612d7c612aff565b5b6000612d8b85828601612d51565b9250506020612d9c85828601612cd3565b9150509250929050565b600060208284031215612dbc57612dbb612aff565b5b6000612dca84828501612cd3565b91505092915050565b600060208284031215612de957612de8612aff565b5b6000612df784828501612d51565b91505092915050565b612e0981612a98565b8114612e1457600080fd5b50565b600081359050612e2681612e00565b92915050565b600060208284031215612e4257612e41612aff565b5b6000612e5084828501612e17565b91505092915050565b6000602082019050612e6e6000830184612a89565b92915050565b60008060408385031215612e8b57612e8a612aff565b5b6000612e9985828601612c50565b9250506020612eaa85828601612e17565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112612ed957612ed8612eb4565b5b8235905067ffffffffffffffff811115612ef657612ef5612eb9565b5b602083019150836001820283011115612f1257612f11612ebe565b5b9250929050565b60008060208385031215612f3057612f2f612aff565b5b600083013567ffffffffffffffff811115612f4e57612f4d612b04565b5b612f5a85828601612ec3565b92509250509250929050565b600060ff82169050919050565b612f7c81612f66565b82525050565b6000602082019050612f976000830184612f73565b92915050565b60008083601f840112612fb357612fb2612eb4565b5b8235905067ffffffffffffffff811115612fd057612fcf612eb9565b5b602083019150836020820283011115612fec57612feb612ebe565b5b9250929050565b6000806020838503121561300a57613009612aff565b5b600083013567ffffffffffffffff81111561302857613027612b04565b5b61303485828601612f9d565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156130a657808201518184015260208101905061308b565b838111156130b5576000848401525b50505050565b6000601f19601f8301169050919050565b60006130d78261306c565b6130e18185613077565b93506130f1818560208601613088565b6130fa816130bb565b840191505092915050565b600061311183836130cc565b905092915050565b6000602082019050919050565b600061313182613040565b61313b818561304b565b93508360208202850161314d8561305c565b8060005b85811015613189578484038952815161316a8582613105565b945061317583613119565b925060208a01995050600181019050613151565b50829750879550505050505092915050565b600060208201905081810360008301526131b58184613126565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131fa826130bb565b810181811067ffffffffffffffff82111715613219576132186131c2565b5b80604052505050565b600061322c612af5565b905061323882826131f1565b919050565b600067ffffffffffffffff821115613258576132576131c2565b5b613261826130bb565b9050602081019050919050565b82818337600083830152505050565b600061329061328b8461323d565b613222565b9050828152602081018484840111156132ac576132ab6131bd565b5b6132b784828561326e565b509392505050565b600082601f8301126132d4576132d3612eb4565b5b81356132e484826020860161327d565b91505092915050565b600067ffffffffffffffff821115613308576133076131c2565b5b602082029050602081019050919050565b600061332c613327846132ed565b613222565b9050808382526020820190506020840283018581111561334f5761334e612ebe565b5b835b8181101561337857806133648882612cd3565b845260208401935050602081019050613351565b5050509392505050565b600082601f83011261339757613396612eb4565b5b81356133a7848260208601613319565b91505092915050565b600067ffffffffffffffff8211156133cb576133ca6131c2565b5b602082029050602081019050919050565b60006133ef6133ea846133b0565b613222565b9050808382526020820190506020840283018581111561341257613411612ebe565b5b835b8181101561343b57806134278882612e17565b845260208401935050602081019050613414565b5050509392505050565b600082601f83011261345a57613459612eb4565b5b813561346a8482602086016133dc565b91505092915050565b600080600080600060a0868803121561348f5761348e612aff565b5b600061349d88828901612cd3565b955050602086013567ffffffffffffffff8111156134be576134bd612b04565b5b6134ca888289016132bf565b945050604086013567ffffffffffffffff8111156134eb576134ea612b04565b5b6134f788828901613382565b935050606086013567ffffffffffffffff81111561351857613517612b04565b5b61352488828901613382565b925050608086013567ffffffffffffffff81111561354557613544612b04565b5b61355188828901613445565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60006135858261355e565b61358f8185613569565b935061359f818560208601613088565b6135a8816130bb565b840191505092915050565b600060208201905081810360008301526135cd818461357a565b905092915050565b7f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060008201527f647565207061796d656e74000000000000000000000000000000000000000000602082015250565b6000613631602b83613569565b915061363c826135d5565b604082019050919050565b6000602082019050818103600083015261366081613624565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006136c3602f83613569565b91506136ce82613667565b604082019050919050565b600060208201905081810360008301526136f2816136b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061373382612a98565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613766576137656136f9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006137ab82612a98565b91506137b683612a98565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156137eb576137ea6136f9565b5b828201905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613822576138216137f6565b5b80840192508235915067ffffffffffffffff821115613844576138436137fb565b5b6020830192506001820236038313156138605761385f613800565b5b509250929050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006138c4602e83613569565b91506138cf82613868565b604082019050919050565b600060208201905081810360008301526138f3816138b7565b9050919050565b6000819050919050565b6000819050919050565b600061392961392461391f846138fa565b613904565b612f66565b9050919050565b6139398161390e565b82525050565b60006020820190506139546000830184613930565b92915050565b60008151905061396981612e00565b92915050565b60006020828403121561398557613984612aff565b5b60006139938482850161395a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806139e357607f821691505b602082108114156139f7576139f661399c565b5b50919050565b7f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060008201527f7368617265730000000000000000000000000000000000000000000000000000602082015250565b6000613a59602683613569565b9150613a64826139fd565b604082019050919050565b60006020820190508181036000830152613a8881613a4c565b9050919050565b6000613aaa613aa5613aa084612a57565b613904565b612a57565b9050919050565b6000613abc82613a8f565b9050919050565b6000613ace82613ab1565b9050919050565b613ade81613ac3565b82525050565b6000604082019050613af96000830185613ad5565b613b066020830184612aa2565b9392505050565b6000613b1882612a98565b9150613b2383612a98565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b5c57613b5b6136f9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ba182612a98565b9150613bac83612a98565b925082613bbc57613bbb613b67565b5b828204905092915050565b6000613bd282612a98565b9150613bdd83612a98565b925082821015613bf057613bef6136f9565b5b828203905092915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000613c57602683613569565b9150613c6282613bfb565b604082019050919050565b60006020820190508181036000830152613c8681613c4a565b9050919050565b600081905092915050565b6000613ca38261306c565b613cad8185613c8d565b9350613cbd818560208601613088565b80840191505092915050565b6000613cd58284613c98565b915081905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613d3c602b83613569565b9150613d4782613ce0565b604082019050919050565b60006020820190508181036000830152613d6b81613d2f565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000613da8601d83613569565b9150613db382613d72565b602082019050919050565b60006020820190508181036000830152613dd781613d9b565b9050919050565b50565b6000613dee600083613c8d565b9150613df982613dde565b600082019050919050565b6000613e0f82613de1565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000613e75603a83613569565b9150613e8082613e19565b604082019050919050565b60006020820190508181036000830152613ea481613e68565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613eec601783613eab565b9150613ef782613eb6565b601782019050919050565b6000613f0d8261355e565b613f178185613eab565b9350613f27818560208601613088565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613f69601183613eab565b9150613f7482613f33565b601182019050919050565b6000613f8a82613edf565b9150613f968285613f02565b9150613fa182613f5c565b9150613fad8284613f02565b91508190509392505050565b7f5061796d656e7453706c69747465723a2070617965657320616e64207368617260008201527f6573206c656e677468206d69736d617463680000000000000000000000000000602082015250565b6000614015603283613569565b915061402082613fb9565b604082019050919050565b6000602082019050818103600083015261404481614008565b9050919050565b7f5061796d656e7453706c69747465723a206e6f20706179656573000000000000600082015250565b6000614081601a83613569565b915061408c8261404b565b602082019050919050565b600060208201905081810360008301526140b081614074565b9050919050565b60006140c282612a98565b915060008214156140d6576140d56136f9565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000614117602083613569565b9150614122826140e1565b602082019050919050565b600060208201905081810360008301526141468161410a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b61418581612b8e565b811461419057600080fd5b50565b6000815190506141a28161417c565b92915050565b6000602082840312156141be576141bd612aff565b5b60006141cc84828501614193565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614231602a83613569565b915061423c826141d5565b604082019050919050565b6000602082019050818103600083015261426081614224565b9050919050565b7f5061796d656e7453706c69747465723a206163636f756e74206973207468652060008201527f7a65726f20616464726573730000000000000000000000000000000000000000602082015250565b60006142c3602c83613569565b91506142ce82614267565b604082019050919050565b600060208201905081810360008301526142f2816142b6565b9050919050565b7f5061796d656e7453706c69747465723a20736861726573206172652030000000600082015250565b600061432f601d83613569565b915061433a826142f9565b602082019050919050565b6000602082019050818103600083015261435e81614322565b9050919050565b7f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960008201527f2068617320736861726573000000000000000000000000000000000000000000602082015250565b60006143c1602b83613569565b91506143cc82614365565b604082019050919050565b600060208201905081810360008301526143f0816143b4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614453602683613569565b915061445e826143f7565b604082019050919050565b6000602082019050818103600083015261448281614446565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006144bf601d83613569565b91506144ca82614489565b602082019050919050565b600060208201905081810360008301526144ee816144b2565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201c6b3a6f5e2470bdbde3dade2f95d23a7d80628049f5d42085a07533f866226164736f6c634300080c0033",
}

// SplitABI is the input ABI used to generate the binding from.
// Deprecated: Use SplitMetaData.ABI instead.
var SplitABI = SplitMetaData.ABI

// SplitBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SplitMetaData.Bin instead.
var SplitBin = SplitMetaData.Bin

// DeploySplit deploys a new Ethereum contract, binding an instance of Split to it.
func DeploySplit(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Split, error) {
	parsed, err := SplitMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SplitBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Split{SplitCaller: SplitCaller{contract: contract}, SplitTransactor: SplitTransactor{contract: contract}, SplitFilterer: SplitFilterer{contract: contract}}, nil
}

// Split is an auto generated Go binding around an Ethereum contract.
type Split struct {
	SplitCaller     // Read-only binding to the contract
	SplitTransactor // Write-only binding to the contract
	SplitFilterer   // Log filterer for contract events
}

// SplitCaller is an auto generated read-only Go binding around an Ethereum contract.
type SplitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SplitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SplitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SplitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SplitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SplitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SplitSession struct {
	Contract     *Split            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SplitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SplitCallerSession struct {
	Contract *SplitCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SplitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SplitTransactorSession struct {
	Contract     *SplitTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SplitRaw is an auto generated low-level Go binding around an Ethereum contract.
type SplitRaw struct {
	Contract *Split // Generic contract binding to access the raw methods on
}

// SplitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SplitCallerRaw struct {
	Contract *SplitCaller // Generic read-only contract binding to access the raw methods on
}

// SplitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SplitTransactorRaw struct {
	Contract *SplitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSplit creates a new instance of Split, bound to a specific deployed contract.
func NewSplit(address common.Address, backend bind.ContractBackend) (*Split, error) {
	contract, err := bindSplit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Split{SplitCaller: SplitCaller{contract: contract}, SplitTransactor: SplitTransactor{contract: contract}, SplitFilterer: SplitFilterer{contract: contract}}, nil
}

// NewSplitCaller creates a new read-only instance of Split, bound to a specific deployed contract.
func NewSplitCaller(address common.Address, caller bind.ContractCaller) (*SplitCaller, error) {
	contract, err := bindSplit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SplitCaller{contract: contract}, nil
}

// NewSplitTransactor creates a new write-only instance of Split, bound to a specific deployed contract.
func NewSplitTransactor(address common.Address, transactor bind.ContractTransactor) (*SplitTransactor, error) {
	contract, err := bindSplit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SplitTransactor{contract: contract}, nil
}

// NewSplitFilterer creates a new log filterer instance of Split, bound to a specific deployed contract.
func NewSplitFilterer(address common.Address, filterer bind.ContractFilterer) (*SplitFilterer, error) {
	contract, err := bindSplit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SplitFilterer{contract: contract}, nil
}

// bindSplit binds a generic wrapper to an already deployed contract.
func bindSplit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SplitABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Split *SplitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Split.Contract.SplitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Split *SplitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Split.Contract.SplitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Split *SplitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Split.Contract.SplitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Split *SplitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Split.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Split *SplitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Split.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Split *SplitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Split.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Split *SplitCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Split *SplitSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Split.Contract.DEFAULTADMINROLE(&_Split.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Split *SplitCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Split.Contract.DEFAULTADMINROLE(&_Split.CallOpts)
}

// ContractType is a free data retrieval call binding the contract method 0xcb2ef6f7.
//
// Solidity: function contractType() pure returns(bytes32)
func (_Split *SplitCaller) ContractType(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "contractType")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ContractType is a free data retrieval call binding the contract method 0xcb2ef6f7.
//
// Solidity: function contractType() pure returns(bytes32)
func (_Split *SplitSession) ContractType() ([32]byte, error) {
	return _Split.Contract.ContractType(&_Split.CallOpts)
}

// ContractType is a free data retrieval call binding the contract method 0xcb2ef6f7.
//
// Solidity: function contractType() pure returns(bytes32)
func (_Split *SplitCallerSession) ContractType() ([32]byte, error) {
	return _Split.Contract.ContractType(&_Split.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_Split *SplitCaller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_Split *SplitSession) ContractURI() (string, error) {
	return _Split.Contract.ContractURI(&_Split.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_Split *SplitCallerSession) ContractURI() (string, error) {
	return _Split.Contract.ContractURI(&_Split.CallOpts)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() pure returns(uint8)
func (_Split *SplitCaller) ContractVersion(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "contractVersion")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() pure returns(uint8)
func (_Split *SplitSession) ContractVersion() (uint8, error) {
	return _Split.Contract.ContractVersion(&_Split.CallOpts)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() pure returns(uint8)
func (_Split *SplitCallerSession) ContractVersion() (uint8, error) {
	return _Split.Contract.ContractVersion(&_Split.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Split *SplitCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Split *SplitSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Split.Contract.GetRoleAdmin(&_Split.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Split *SplitCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Split.Contract.GetRoleAdmin(&_Split.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Split *SplitCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Split *SplitSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Split.Contract.GetRoleMember(&_Split.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Split *SplitCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Split.Contract.GetRoleMember(&_Split.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Split *SplitCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Split *SplitSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Split.Contract.GetRoleMemberCount(&_Split.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Split *SplitCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Split.Contract.GetRoleMemberCount(&_Split.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Split *SplitCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Split *SplitSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Split.Contract.HasRole(&_Split.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Split *SplitCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Split.Contract.HasRole(&_Split.CallOpts, role, account)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Split *SplitCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Split *SplitSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Split.Contract.IsTrustedForwarder(&_Split.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Split *SplitCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Split.Contract.IsTrustedForwarder(&_Split.CallOpts, forwarder)
}

// Payee is a free data retrieval call binding the contract method 0x8b83209b.
//
// Solidity: function payee(uint256 index) view returns(address)
func (_Split *SplitCaller) Payee(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "payee", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Payee is a free data retrieval call binding the contract method 0x8b83209b.
//
// Solidity: function payee(uint256 index) view returns(address)
func (_Split *SplitSession) Payee(index *big.Int) (common.Address, error) {
	return _Split.Contract.Payee(&_Split.CallOpts, index)
}

// Payee is a free data retrieval call binding the contract method 0x8b83209b.
//
// Solidity: function payee(uint256 index) view returns(address)
func (_Split *SplitCallerSession) Payee(index *big.Int) (common.Address, error) {
	return _Split.Contract.Payee(&_Split.CallOpts, index)
}

// PayeeCount is a free data retrieval call binding the contract method 0x00dbe109.
//
// Solidity: function payeeCount() view returns(uint256)
func (_Split *SplitCaller) PayeeCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "payeeCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PayeeCount is a free data retrieval call binding the contract method 0x00dbe109.
//
// Solidity: function payeeCount() view returns(uint256)
func (_Split *SplitSession) PayeeCount() (*big.Int, error) {
	return _Split.Contract.PayeeCount(&_Split.CallOpts)
}

// PayeeCount is a free data retrieval call binding the contract method 0x00dbe109.
//
// Solidity: function payeeCount() view returns(uint256)
func (_Split *SplitCallerSession) PayeeCount() (*big.Int, error) {
	return _Split.Contract.PayeeCount(&_Split.CallOpts)
}

// Releasable is a free data retrieval call binding the contract method 0xa3f8eace.
//
// Solidity: function releasable(address account) view returns(uint256)
func (_Split *SplitCaller) Releasable(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "releasable", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Releasable is a free data retrieval call binding the contract method 0xa3f8eace.
//
// Solidity: function releasable(address account) view returns(uint256)
func (_Split *SplitSession) Releasable(account common.Address) (*big.Int, error) {
	return _Split.Contract.Releasable(&_Split.CallOpts, account)
}

// Releasable is a free data retrieval call binding the contract method 0xa3f8eace.
//
// Solidity: function releasable(address account) view returns(uint256)
func (_Split *SplitCallerSession) Releasable(account common.Address) (*big.Int, error) {
	return _Split.Contract.Releasable(&_Split.CallOpts, account)
}

// Releasable0 is a free data retrieval call binding the contract method 0xc45ac050.
//
// Solidity: function releasable(address token, address account) view returns(uint256)
func (_Split *SplitCaller) Releasable0(opts *bind.CallOpts, token common.Address, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "releasable0", token, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Releasable0 is a free data retrieval call binding the contract method 0xc45ac050.
//
// Solidity: function releasable(address token, address account) view returns(uint256)
func (_Split *SplitSession) Releasable0(token common.Address, account common.Address) (*big.Int, error) {
	return _Split.Contract.Releasable0(&_Split.CallOpts, token, account)
}

// Releasable0 is a free data retrieval call binding the contract method 0xc45ac050.
//
// Solidity: function releasable(address token, address account) view returns(uint256)
func (_Split *SplitCallerSession) Releasable0(token common.Address, account common.Address) (*big.Int, error) {
	return _Split.Contract.Releasable0(&_Split.CallOpts, token, account)
}

// Released is a free data retrieval call binding the contract method 0x406072a9.
//
// Solidity: function released(address token, address account) view returns(uint256)
func (_Split *SplitCaller) Released(opts *bind.CallOpts, token common.Address, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "released", token, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Released is a free data retrieval call binding the contract method 0x406072a9.
//
// Solidity: function released(address token, address account) view returns(uint256)
func (_Split *SplitSession) Released(token common.Address, account common.Address) (*big.Int, error) {
	return _Split.Contract.Released(&_Split.CallOpts, token, account)
}

// Released is a free data retrieval call binding the contract method 0x406072a9.
//
// Solidity: function released(address token, address account) view returns(uint256)
func (_Split *SplitCallerSession) Released(token common.Address, account common.Address) (*big.Int, error) {
	return _Split.Contract.Released(&_Split.CallOpts, token, account)
}

// Released0 is a free data retrieval call binding the contract method 0x9852595c.
//
// Solidity: function released(address account) view returns(uint256)
func (_Split *SplitCaller) Released0(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "released0", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Released0 is a free data retrieval call binding the contract method 0x9852595c.
//
// Solidity: function released(address account) view returns(uint256)
func (_Split *SplitSession) Released0(account common.Address) (*big.Int, error) {
	return _Split.Contract.Released0(&_Split.CallOpts, account)
}

// Released0 is a free data retrieval call binding the contract method 0x9852595c.
//
// Solidity: function released(address account) view returns(uint256)
func (_Split *SplitCallerSession) Released0(account common.Address) (*big.Int, error) {
	return _Split.Contract.Released0(&_Split.CallOpts, account)
}

// Shares is a free data retrieval call binding the contract method 0xce7c2ac2.
//
// Solidity: function shares(address account) view returns(uint256)
func (_Split *SplitCaller) Shares(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "shares", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Shares is a free data retrieval call binding the contract method 0xce7c2ac2.
//
// Solidity: function shares(address account) view returns(uint256)
func (_Split *SplitSession) Shares(account common.Address) (*big.Int, error) {
	return _Split.Contract.Shares(&_Split.CallOpts, account)
}

// Shares is a free data retrieval call binding the contract method 0xce7c2ac2.
//
// Solidity: function shares(address account) view returns(uint256)
func (_Split *SplitCallerSession) Shares(account common.Address) (*big.Int, error) {
	return _Split.Contract.Shares(&_Split.CallOpts, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Split *SplitCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Split *SplitSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Split.Contract.SupportsInterface(&_Split.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Split *SplitCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Split.Contract.SupportsInterface(&_Split.CallOpts, interfaceId)
}

// TotalReleased is a free data retrieval call binding the contract method 0xd79779b2.
//
// Solidity: function totalReleased(address token) view returns(uint256)
func (_Split *SplitCaller) TotalReleased(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "totalReleased", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalReleased is a free data retrieval call binding the contract method 0xd79779b2.
//
// Solidity: function totalReleased(address token) view returns(uint256)
func (_Split *SplitSession) TotalReleased(token common.Address) (*big.Int, error) {
	return _Split.Contract.TotalReleased(&_Split.CallOpts, token)
}

// TotalReleased is a free data retrieval call binding the contract method 0xd79779b2.
//
// Solidity: function totalReleased(address token) view returns(uint256)
func (_Split *SplitCallerSession) TotalReleased(token common.Address) (*big.Int, error) {
	return _Split.Contract.TotalReleased(&_Split.CallOpts, token)
}

// TotalReleased0 is a free data retrieval call binding the contract method 0xe33b7de3.
//
// Solidity: function totalReleased() view returns(uint256)
func (_Split *SplitCaller) TotalReleased0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "totalReleased0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalReleased0 is a free data retrieval call binding the contract method 0xe33b7de3.
//
// Solidity: function totalReleased() view returns(uint256)
func (_Split *SplitSession) TotalReleased0() (*big.Int, error) {
	return _Split.Contract.TotalReleased0(&_Split.CallOpts)
}

// TotalReleased0 is a free data retrieval call binding the contract method 0xe33b7de3.
//
// Solidity: function totalReleased() view returns(uint256)
func (_Split *SplitCallerSession) TotalReleased0() (*big.Int, error) {
	return _Split.Contract.TotalReleased0(&_Split.CallOpts)
}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_Split *SplitCaller) TotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Split.contract.Call(opts, &out, "totalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_Split *SplitSession) TotalShares() (*big.Int, error) {
	return _Split.Contract.TotalShares(&_Split.CallOpts)
}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_Split *SplitCallerSession) TotalShares() (*big.Int, error) {
	return _Split.Contract.TotalShares(&_Split.CallOpts)
}

// Distribute is a paid mutator transaction binding the contract method 0x63453ae1.
//
// Solidity: function distribute(address token) returns()
func (_Split *SplitTransactor) Distribute(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "distribute", token)
}

// Distribute is a paid mutator transaction binding the contract method 0x63453ae1.
//
// Solidity: function distribute(address token) returns()
func (_Split *SplitSession) Distribute(token common.Address) (*types.Transaction, error) {
	return _Split.Contract.Distribute(&_Split.TransactOpts, token)
}

// Distribute is a paid mutator transaction binding the contract method 0x63453ae1.
//
// Solidity: function distribute(address token) returns()
func (_Split *SplitTransactorSession) Distribute(token common.Address) (*types.Transaction, error) {
	return _Split.Contract.Distribute(&_Split.TransactOpts, token)
}

// Distribute0 is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns()
func (_Split *SplitTransactor) Distribute0(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "distribute0")
}

// Distribute0 is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns()
func (_Split *SplitSession) Distribute0() (*types.Transaction, error) {
	return _Split.Contract.Distribute0(&_Split.TransactOpts)
}

// Distribute0 is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns()
func (_Split *SplitTransactorSession) Distribute0() (*types.Transaction, error) {
	return _Split.Contract.Distribute0(&_Split.TransactOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Split *SplitTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Split *SplitSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.GrantRole(&_Split.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Split *SplitTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.GrantRole(&_Split.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xb1a14437.
//
// Solidity: function initialize(address _defaultAdmin, string _contractURI, address[] _trustedForwarders, address[] _payees, uint256[] _shares) returns()
func (_Split *SplitTransactor) Initialize(opts *bind.TransactOpts, _defaultAdmin common.Address, _contractURI string, _trustedForwarders []common.Address, _payees []common.Address, _shares []*big.Int) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "initialize", _defaultAdmin, _contractURI, _trustedForwarders, _payees, _shares)
}

// Initialize is a paid mutator transaction binding the contract method 0xb1a14437.
//
// Solidity: function initialize(address _defaultAdmin, string _contractURI, address[] _trustedForwarders, address[] _payees, uint256[] _shares) returns()
func (_Split *SplitSession) Initialize(_defaultAdmin common.Address, _contractURI string, _trustedForwarders []common.Address, _payees []common.Address, _shares []*big.Int) (*types.Transaction, error) {
	return _Split.Contract.Initialize(&_Split.TransactOpts, _defaultAdmin, _contractURI, _trustedForwarders, _payees, _shares)
}

// Initialize is a paid mutator transaction binding the contract method 0xb1a14437.
//
// Solidity: function initialize(address _defaultAdmin, string _contractURI, address[] _trustedForwarders, address[] _payees, uint256[] _shares) returns()
func (_Split *SplitTransactorSession) Initialize(_defaultAdmin common.Address, _contractURI string, _trustedForwarders []common.Address, _payees []common.Address, _shares []*big.Int) (*types.Transaction, error) {
	return _Split.Contract.Initialize(&_Split.TransactOpts, _defaultAdmin, _contractURI, _trustedForwarders, _payees, _shares)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Split *SplitTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Split *SplitSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Split.Contract.Multicall(&_Split.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Split *SplitTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Split.Contract.Multicall(&_Split.TransactOpts, data)
}

// Release is a paid mutator transaction binding the contract method 0x19165587.
//
// Solidity: function release(address account) returns()
func (_Split *SplitTransactor) Release(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "release", account)
}

// Release is a paid mutator transaction binding the contract method 0x19165587.
//
// Solidity: function release(address account) returns()
func (_Split *SplitSession) Release(account common.Address) (*types.Transaction, error) {
	return _Split.Contract.Release(&_Split.TransactOpts, account)
}

// Release is a paid mutator transaction binding the contract method 0x19165587.
//
// Solidity: function release(address account) returns()
func (_Split *SplitTransactorSession) Release(account common.Address) (*types.Transaction, error) {
	return _Split.Contract.Release(&_Split.TransactOpts, account)
}

// Release0 is a paid mutator transaction binding the contract method 0x48b75044.
//
// Solidity: function release(address token, address account) returns()
func (_Split *SplitTransactor) Release0(opts *bind.TransactOpts, token common.Address, account common.Address) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "release0", token, account)
}

// Release0 is a paid mutator transaction binding the contract method 0x48b75044.
//
// Solidity: function release(address token, address account) returns()
func (_Split *SplitSession) Release0(token common.Address, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.Release0(&_Split.TransactOpts, token, account)
}

// Release0 is a paid mutator transaction binding the contract method 0x48b75044.
//
// Solidity: function release(address token, address account) returns()
func (_Split *SplitTransactorSession) Release0(token common.Address, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.Release0(&_Split.TransactOpts, token, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Split *SplitTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Split *SplitSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.RenounceRole(&_Split.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Split *SplitTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.RenounceRole(&_Split.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Split *SplitTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Split *SplitSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.RevokeRole(&_Split.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Split *SplitTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Split.Contract.RevokeRole(&_Split.TransactOpts, role, account)
}

// SetContractURI is a paid mutator transaction binding the contract method 0x938e3d7b.
//
// Solidity: function setContractURI(string _uri) returns()
func (_Split *SplitTransactor) SetContractURI(opts *bind.TransactOpts, _uri string) (*types.Transaction, error) {
	return _Split.contract.Transact(opts, "setContractURI", _uri)
}

// SetContractURI is a paid mutator transaction binding the contract method 0x938e3d7b.
//
// Solidity: function setContractURI(string _uri) returns()
func (_Split *SplitSession) SetContractURI(_uri string) (*types.Transaction, error) {
	return _Split.Contract.SetContractURI(&_Split.TransactOpts, _uri)
}

// SetContractURI is a paid mutator transaction binding the contract method 0x938e3d7b.
//
// Solidity: function setContractURI(string _uri) returns()
func (_Split *SplitTransactorSession) SetContractURI(_uri string) (*types.Transaction, error) {
	return _Split.Contract.SetContractURI(&_Split.TransactOpts, _uri)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Split *SplitTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Split.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Split *SplitSession) Receive() (*types.Transaction, error) {
	return _Split.Contract.Receive(&_Split.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Split *SplitTransactorSession) Receive() (*types.Transaction, error) {
	return _Split.Contract.Receive(&_Split.TransactOpts)
}

// SplitERC20PaymentReleasedIterator is returned from FilterERC20PaymentReleased and is used to iterate over the raw logs and unpacked data for ERC20PaymentReleased events raised by the Split contract.
type SplitERC20PaymentReleasedIterator struct {
	Event *SplitERC20PaymentReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitERC20PaymentReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitERC20PaymentReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitERC20PaymentReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitERC20PaymentReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitERC20PaymentReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitERC20PaymentReleased represents a ERC20PaymentReleased event raised by the Split contract.
type SplitERC20PaymentReleased struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterERC20PaymentReleased is a free log retrieval operation binding the contract event 0x3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a.
//
// Solidity: event ERC20PaymentReleased(address indexed token, address to, uint256 amount)
func (_Split *SplitFilterer) FilterERC20PaymentReleased(opts *bind.FilterOpts, token []common.Address) (*SplitERC20PaymentReleasedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Split.contract.FilterLogs(opts, "ERC20PaymentReleased", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SplitERC20PaymentReleasedIterator{contract: _Split.contract, event: "ERC20PaymentReleased", logs: logs, sub: sub}, nil
}

// WatchERC20PaymentReleased is a free log subscription operation binding the contract event 0x3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a.
//
// Solidity: event ERC20PaymentReleased(address indexed token, address to, uint256 amount)
func (_Split *SplitFilterer) WatchERC20PaymentReleased(opts *bind.WatchOpts, sink chan<- *SplitERC20PaymentReleased, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Split.contract.WatchLogs(opts, "ERC20PaymentReleased", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitERC20PaymentReleased)
				if err := _Split.contract.UnpackLog(event, "ERC20PaymentReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20PaymentReleased is a log parse operation binding the contract event 0x3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a.
//
// Solidity: event ERC20PaymentReleased(address indexed token, address to, uint256 amount)
func (_Split *SplitFilterer) ParseERC20PaymentReleased(log types.Log) (*SplitERC20PaymentReleased, error) {
	event := new(SplitERC20PaymentReleased)
	if err := _Split.contract.UnpackLog(event, "ERC20PaymentReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SplitInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Split contract.
type SplitInitializedIterator struct {
	Event *SplitInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitInitialized represents a Initialized event raised by the Split contract.
type SplitInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Split *SplitFilterer) FilterInitialized(opts *bind.FilterOpts) (*SplitInitializedIterator, error) {

	logs, sub, err := _Split.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SplitInitializedIterator{contract: _Split.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Split *SplitFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SplitInitialized) (event.Subscription, error) {

	logs, sub, err := _Split.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitInitialized)
				if err := _Split.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Split *SplitFilterer) ParseInitialized(log types.Log) (*SplitInitialized, error) {
	event := new(SplitInitialized)
	if err := _Split.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SplitPayeeAddedIterator is returned from FilterPayeeAdded and is used to iterate over the raw logs and unpacked data for PayeeAdded events raised by the Split contract.
type SplitPayeeAddedIterator struct {
	Event *SplitPayeeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitPayeeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitPayeeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitPayeeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitPayeeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitPayeeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitPayeeAdded represents a PayeeAdded event raised by the Split contract.
type SplitPayeeAdded struct {
	Account common.Address
	Shares  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPayeeAdded is a free log retrieval operation binding the contract event 0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac.
//
// Solidity: event PayeeAdded(address account, uint256 shares)
func (_Split *SplitFilterer) FilterPayeeAdded(opts *bind.FilterOpts) (*SplitPayeeAddedIterator, error) {

	logs, sub, err := _Split.contract.FilterLogs(opts, "PayeeAdded")
	if err != nil {
		return nil, err
	}
	return &SplitPayeeAddedIterator{contract: _Split.contract, event: "PayeeAdded", logs: logs, sub: sub}, nil
}

// WatchPayeeAdded is a free log subscription operation binding the contract event 0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac.
//
// Solidity: event PayeeAdded(address account, uint256 shares)
func (_Split *SplitFilterer) WatchPayeeAdded(opts *bind.WatchOpts, sink chan<- *SplitPayeeAdded) (event.Subscription, error) {

	logs, sub, err := _Split.contract.WatchLogs(opts, "PayeeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitPayeeAdded)
				if err := _Split.contract.UnpackLog(event, "PayeeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePayeeAdded is a log parse operation binding the contract event 0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac.
//
// Solidity: event PayeeAdded(address account, uint256 shares)
func (_Split *SplitFilterer) ParsePayeeAdded(log types.Log) (*SplitPayeeAdded, error) {
	event := new(SplitPayeeAdded)
	if err := _Split.contract.UnpackLog(event, "PayeeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SplitPaymentReceivedIterator is returned from FilterPaymentReceived and is used to iterate over the raw logs and unpacked data for PaymentReceived events raised by the Split contract.
type SplitPaymentReceivedIterator struct {
	Event *SplitPaymentReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitPaymentReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitPaymentReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitPaymentReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitPaymentReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitPaymentReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitPaymentReceived represents a PaymentReceived event raised by the Split contract.
type SplitPaymentReceived struct {
	From   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaymentReceived is a free log retrieval operation binding the contract event 0x6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770.
//
// Solidity: event PaymentReceived(address from, uint256 amount)
func (_Split *SplitFilterer) FilterPaymentReceived(opts *bind.FilterOpts) (*SplitPaymentReceivedIterator, error) {

	logs, sub, err := _Split.contract.FilterLogs(opts, "PaymentReceived")
	if err != nil {
		return nil, err
	}
	return &SplitPaymentReceivedIterator{contract: _Split.contract, event: "PaymentReceived", logs: logs, sub: sub}, nil
}

// WatchPaymentReceived is a free log subscription operation binding the contract event 0x6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770.
//
// Solidity: event PaymentReceived(address from, uint256 amount)
func (_Split *SplitFilterer) WatchPaymentReceived(opts *bind.WatchOpts, sink chan<- *SplitPaymentReceived) (event.Subscription, error) {

	logs, sub, err := _Split.contract.WatchLogs(opts, "PaymentReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitPaymentReceived)
				if err := _Split.contract.UnpackLog(event, "PaymentReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaymentReceived is a log parse operation binding the contract event 0x6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770.
//
// Solidity: event PaymentReceived(address from, uint256 amount)
func (_Split *SplitFilterer) ParsePaymentReceived(log types.Log) (*SplitPaymentReceived, error) {
	event := new(SplitPaymentReceived)
	if err := _Split.contract.UnpackLog(event, "PaymentReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SplitPaymentReleasedIterator is returned from FilterPaymentReleased and is used to iterate over the raw logs and unpacked data for PaymentReleased events raised by the Split contract.
type SplitPaymentReleasedIterator struct {
	Event *SplitPaymentReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitPaymentReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitPaymentReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitPaymentReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitPaymentReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitPaymentReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitPaymentReleased represents a PaymentReleased event raised by the Split contract.
type SplitPaymentReleased struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaymentReleased is a free log retrieval operation binding the contract event 0xdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056.
//
// Solidity: event PaymentReleased(address to, uint256 amount)
func (_Split *SplitFilterer) FilterPaymentReleased(opts *bind.FilterOpts) (*SplitPaymentReleasedIterator, error) {

	logs, sub, err := _Split.contract.FilterLogs(opts, "PaymentReleased")
	if err != nil {
		return nil, err
	}
	return &SplitPaymentReleasedIterator{contract: _Split.contract, event: "PaymentReleased", logs: logs, sub: sub}, nil
}

// WatchPaymentReleased is a free log subscription operation binding the contract event 0xdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056.
//
// Solidity: event PaymentReleased(address to, uint256 amount)
func (_Split *SplitFilterer) WatchPaymentReleased(opts *bind.WatchOpts, sink chan<- *SplitPaymentReleased) (event.Subscription, error) {

	logs, sub, err := _Split.contract.WatchLogs(opts, "PaymentReleased")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitPaymentReleased)
				if err := _Split.contract.UnpackLog(event, "PaymentReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaymentReleased is a log parse operation binding the contract event 0xdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056.
//
// Solidity: event PaymentReleased(address to, uint256 amount)
func (_Split *SplitFilterer) ParsePaymentReleased(log types.Log) (*SplitPaymentReleased, error) {
	event := new(SplitPaymentReleased)
	if err := _Split.contract.UnpackLog(event, "PaymentReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SplitRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Split contract.
type SplitRoleAdminChangedIterator struct {
	Event *SplitRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitRoleAdminChanged represents a RoleAdminChanged event raised by the Split contract.
type SplitRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Split *SplitFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*SplitRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Split.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &SplitRoleAdminChangedIterator{contract: _Split.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Split *SplitFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *SplitRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Split.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitRoleAdminChanged)
				if err := _Split.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Split *SplitFilterer) ParseRoleAdminChanged(log types.Log) (*SplitRoleAdminChanged, error) {
	event := new(SplitRoleAdminChanged)
	if err := _Split.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SplitRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Split contract.
type SplitRoleGrantedIterator struct {
	Event *SplitRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitRoleGranted represents a RoleGranted event raised by the Split contract.
type SplitRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Split *SplitFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*SplitRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Split.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SplitRoleGrantedIterator{contract: _Split.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Split *SplitFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *SplitRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Split.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitRoleGranted)
				if err := _Split.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Split *SplitFilterer) ParseRoleGranted(log types.Log) (*SplitRoleGranted, error) {
	event := new(SplitRoleGranted)
	if err := _Split.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SplitRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Split contract.
type SplitRoleRevokedIterator struct {
	Event *SplitRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SplitRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SplitRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SplitRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SplitRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SplitRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SplitRoleRevoked represents a RoleRevoked event raised by the Split contract.
type SplitRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Split *SplitFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*SplitRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Split.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SplitRoleRevokedIterator{contract: _Split.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Split *SplitFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *SplitRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Split.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SplitRoleRevoked)
				if err := _Split.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Split *SplitFilterer) ParseRoleRevoked(log types.Log) (*SplitRoleRevoked, error) {
	event := new(SplitRoleRevoked)
	if err := _Split.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
